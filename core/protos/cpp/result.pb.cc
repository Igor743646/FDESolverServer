// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: result.proto

#include "result.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace PFDESolver {
PROTOBUF_CONSTEXPR TResult::TResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.methodname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.config_)*/nullptr
  , /*decltype(_impl_.field_)*/nullptr
  , /*decltype(_impl_.solvematrix_)*/nullptr} {}
struct TResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TResultDefaultTypeInternal() {}
  union {
    TResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TResultDefaultTypeInternal _TResult_default_instance_;
PROTOBUF_CONSTEXPR TResults::TResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.realsolutionname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.task_)*/nullptr
  , /*decltype(_impl_.realsolution_)*/nullptr} {}
struct TResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TResultsDefaultTypeInternal() {}
  union {
    TResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TResultsDefaultTypeInternal _TResults_default_instance_;
}  // namespace PFDESolver
static ::_pb::Metadata file_level_metadata_result_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_result_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_result_2eproto = nullptr;

const uint32_t TableStruct_result_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::PFDESolver::TResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PFDESolver::TResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PFDESolver::TResult, _impl_.methodname_),
  PROTOBUF_FIELD_OFFSET(::PFDESolver::TResult, _impl_.config_),
  PROTOBUF_FIELD_OFFSET(::PFDESolver::TResult, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::PFDESolver::TResult, _impl_.solvematrix_),
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::PFDESolver::TResults, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PFDESolver::TResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PFDESolver::TResults, _impl_.task_),
  PROTOBUF_FIELD_OFFSET(::PFDESolver::TResults, _impl_.results_),
  PROTOBUF_FIELD_OFFSET(::PFDESolver::TResults, _impl_.realsolution_),
  PROTOBUF_FIELD_OFFSET(::PFDESolver::TResults, _impl_.realsolutionname_),
  ~0u,
  ~0u,
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::PFDESolver::TResult)},
  { 14, 24, -1, sizeof(::PFDESolver::TResults)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::PFDESolver::_TResult_default_instance_._instance,
  &::PFDESolver::_TResults_default_instance_._instance,
};

const char descriptor_table_protodef_result_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014result.proto\022\nPFDESolver\032\014config.proto"
  "\032\014matrix.proto\"\253\001\n\007TResult\022\022\n\nMethodName"
  "\030\001 \001(\t\022)\n\006Config\030\002 \001(\0132\031.PFDESolver.TSol"
  "verConfig\022\"\n\005Field\030\003 \001(\0132\023.PFDESolver.TM"
  "atrix\022-\n\013SolveMatrix\030\004 \001(\0132\023.PFDESolver."
  "TMatrixH\000\210\001\001B\016\n\014_SolveMatrix\"\316\001\n\010TResult"
  "s\022\'\n\004Task\030\001 \001(\0132\031.PFDESolver.TSolverConf"
  "ig\022$\n\007Results\030\002 \003(\0132\023.PFDESolver.TResult"
  "\022.\n\014RealSolution\030\003 \001(\0132\023.PFDESolver.TMat"
  "rixH\000\210\001\001\022\035\n\020RealSolutionName\030\004 \001(\tH\001\210\001\001B"
  "\017\n\r_RealSolutionB\023\n\021_RealSolutionNameb\006p"
  "roto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_result_2eproto_deps[2] = {
  &::descriptor_table_config_2eproto,
  &::descriptor_table_matrix_2eproto,
};
static ::_pbi::once_flag descriptor_table_result_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_result_2eproto = {
    false, false, 445, descriptor_table_protodef_result_2eproto,
    "result.proto",
    &descriptor_table_result_2eproto_once, descriptor_table_result_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_result_2eproto::offsets,
    file_level_metadata_result_2eproto, file_level_enum_descriptors_result_2eproto,
    file_level_service_descriptors_result_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_result_2eproto_getter() {
  return &descriptor_table_result_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_result_2eproto(&descriptor_table_result_2eproto);
namespace PFDESolver {

// ===================================================================

class TResult::_Internal {
 public:
  using HasBits = decltype(std::declval<TResult>()._impl_._has_bits_);
  static const ::PFDESolver::TSolverConfig& config(const TResult* msg);
  static const ::PFDESolver::TMatrix& field(const TResult* msg);
  static const ::PFDESolver::TMatrix& solvematrix(const TResult* msg);
  static void set_has_solvematrix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PFDESolver::TSolverConfig&
TResult::_Internal::config(const TResult* msg) {
  return *msg->_impl_.config_;
}
const ::PFDESolver::TMatrix&
TResult::_Internal::field(const TResult* msg) {
  return *msg->_impl_.field_;
}
const ::PFDESolver::TMatrix&
TResult::_Internal::solvematrix(const TResult* msg) {
  return *msg->_impl_.solvematrix_;
}
void TResult::clear_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
}
void TResult::clear_field() {
  if (GetArenaForAllocation() == nullptr && _impl_.field_ != nullptr) {
    delete _impl_.field_;
  }
  _impl_.field_ = nullptr;
}
void TResult::clear_solvematrix() {
  if (_impl_.solvematrix_ != nullptr) _impl_.solvematrix_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TResult::TResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PFDESolver.TResult)
}
TResult::TResult(const TResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.methodname_){}
    , decltype(_impl_.config_){nullptr}
    , decltype(_impl_.field_){nullptr}
    , decltype(_impl_.solvematrix_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.methodname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.methodname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_methodname().empty()) {
    _this->_impl_.methodname_.Set(from._internal_methodname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_config()) {
    _this->_impl_.config_ = new ::PFDESolver::TSolverConfig(*from._impl_.config_);
  }
  if (from._internal_has_field()) {
    _this->_impl_.field_ = new ::PFDESolver::TMatrix(*from._impl_.field_);
  }
  if (from._internal_has_solvematrix()) {
    _this->_impl_.solvematrix_ = new ::PFDESolver::TMatrix(*from._impl_.solvematrix_);
  }
  // @@protoc_insertion_point(copy_constructor:PFDESolver.TResult)
}

inline void TResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.methodname_){}
    , decltype(_impl_.config_){nullptr}
    , decltype(_impl_.field_){nullptr}
    , decltype(_impl_.solvematrix_){nullptr}
  };
  _impl_.methodname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.methodname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TResult::~TResult() {
  // @@protoc_insertion_point(destructor:PFDESolver.TResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.methodname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.config_;
  if (this != internal_default_instance()) delete _impl_.field_;
  if (this != internal_default_instance()) delete _impl_.solvematrix_;
}

void TResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TResult::Clear() {
// @@protoc_insertion_point(message_clear_start:PFDESolver.TResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.methodname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.field_ != nullptr) {
    delete _impl_.field_;
  }
  _impl_.field_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.solvematrix_ != nullptr);
    _impl_.solvematrix_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string MethodName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_methodname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PFDESolver.TResult.MethodName"));
        } else
          goto handle_unusual;
        continue;
      // .PFDESolver.TSolverConfig Config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PFDESolver.TMatrix Field = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PFDESolver.TMatrix SolveMatrix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_solvematrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PFDESolver.TResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string MethodName = 1;
  if (!this->_internal_methodname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_methodname().data(), static_cast<int>(this->_internal_methodname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PFDESolver.TResult.MethodName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_methodname(), target);
  }

  // .PFDESolver.TSolverConfig Config = 2;
  if (this->_internal_has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  // .PFDESolver.TMatrix Field = 3;
  if (this->_internal_has_field()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::field(this),
        _Internal::field(this).GetCachedSize(), target, stream);
  }

  // optional .PFDESolver.TMatrix SolveMatrix = 4;
  if (_internal_has_solvematrix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::solvematrix(this),
        _Internal::solvematrix(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PFDESolver.TResult)
  return target;
}

size_t TResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PFDESolver.TResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string MethodName = 1;
  if (!this->_internal_methodname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_methodname());
  }

  // .PFDESolver.TSolverConfig Config = 2;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_);
  }

  // .PFDESolver.TMatrix Field = 3;
  if (this->_internal_has_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.field_);
  }

  // optional .PFDESolver.TMatrix SolveMatrix = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.solvematrix_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TResult::GetClassData() const { return &_class_data_; }


void TResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TResult*>(&to_msg);
  auto& from = static_cast<const TResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PFDESolver.TResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_methodname().empty()) {
    _this->_internal_set_methodname(from._internal_methodname());
  }
  if (from._internal_has_config()) {
    _this->_internal_mutable_config()->::PFDESolver::TSolverConfig::MergeFrom(
        from._internal_config());
  }
  if (from._internal_has_field()) {
    _this->_internal_mutable_field()->::PFDESolver::TMatrix::MergeFrom(
        from._internal_field());
  }
  if (from._internal_has_solvematrix()) {
    _this->_internal_mutable_solvematrix()->::PFDESolver::TMatrix::MergeFrom(
        from._internal_solvematrix());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TResult::CopyFrom(const TResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PFDESolver.TResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TResult::IsInitialized() const {
  return true;
}

void TResult::InternalSwap(TResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.methodname_, lhs_arena,
      &other->_impl_.methodname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TResult, _impl_.solvematrix_)
      + sizeof(TResult::_impl_.solvematrix_)
      - PROTOBUF_FIELD_OFFSET(TResult, _impl_.config_)>(
          reinterpret_cast<char*>(&_impl_.config_),
          reinterpret_cast<char*>(&other->_impl_.config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_result_2eproto_getter, &descriptor_table_result_2eproto_once,
      file_level_metadata_result_2eproto[0]);
}

// ===================================================================

class TResults::_Internal {
 public:
  using HasBits = decltype(std::declval<TResults>()._impl_._has_bits_);
  static const ::PFDESolver::TSolverConfig& task(const TResults* msg);
  static const ::PFDESolver::TMatrix& realsolution(const TResults* msg);
  static void set_has_realsolution(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_realsolutionname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PFDESolver::TSolverConfig&
TResults::_Internal::task(const TResults* msg) {
  return *msg->_impl_.task_;
}
const ::PFDESolver::TMatrix&
TResults::_Internal::realsolution(const TResults* msg) {
  return *msg->_impl_.realsolution_;
}
void TResults::clear_task() {
  if (GetArenaForAllocation() == nullptr && _impl_.task_ != nullptr) {
    delete _impl_.task_;
  }
  _impl_.task_ = nullptr;
}
void TResults::clear_realsolution() {
  if (_impl_.realsolution_ != nullptr) _impl_.realsolution_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TResults::TResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PFDESolver.TResults)
}
TResults::TResults(const TResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.realsolutionname_){}
    , decltype(_impl_.task_){nullptr}
    , decltype(_impl_.realsolution_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.realsolutionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.realsolutionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_realsolutionname()) {
    _this->_impl_.realsolutionname_.Set(from._internal_realsolutionname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_task()) {
    _this->_impl_.task_ = new ::PFDESolver::TSolverConfig(*from._impl_.task_);
  }
  if (from._internal_has_realsolution()) {
    _this->_impl_.realsolution_ = new ::PFDESolver::TMatrix(*from._impl_.realsolution_);
  }
  // @@protoc_insertion_point(copy_constructor:PFDESolver.TResults)
}

inline void TResults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.results_){arena}
    , decltype(_impl_.realsolutionname_){}
    , decltype(_impl_.task_){nullptr}
    , decltype(_impl_.realsolution_){nullptr}
  };
  _impl_.realsolutionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.realsolutionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TResults::~TResults() {
  // @@protoc_insertion_point(destructor:PFDESolver.TResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
  _impl_.realsolutionname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.task_;
  if (this != internal_default_instance()) delete _impl_.realsolution_;
}

void TResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TResults::Clear() {
// @@protoc_insertion_point(message_clear_start:PFDESolver.TResults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.realsolutionname_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.task_ != nullptr) {
    delete _impl_.task_;
  }
  _impl_.task_ = nullptr;
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(_impl_.realsolution_ != nullptr);
    _impl_.realsolution_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PFDESolver.TSolverConfig Task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PFDESolver.TResult Results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .PFDESolver.TMatrix RealSolution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_realsolution(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string RealSolutionName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_realsolutionname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PFDESolver.TResults.RealSolutionName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TResults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PFDESolver.TResults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PFDESolver.TSolverConfig Task = 1;
  if (this->_internal_has_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::task(this),
        _Internal::task(this).GetCachedSize(), target, stream);
  }

  // repeated .PFDESolver.TResult Results = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .PFDESolver.TMatrix RealSolution = 3;
  if (_internal_has_realsolution()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::realsolution(this),
        _Internal::realsolution(this).GetCachedSize(), target, stream);
  }

  // optional string RealSolutionName = 4;
  if (_internal_has_realsolutionname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_realsolutionname().data(), static_cast<int>(this->_internal_realsolutionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PFDESolver.TResults.RealSolutionName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_realsolutionname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PFDESolver.TResults)
  return target;
}

size_t TResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PFDESolver.TResults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PFDESolver.TResult Results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string RealSolutionName = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_realsolutionname());
  }

  // .PFDESolver.TSolverConfig Task = 1;
  if (this->_internal_has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.task_);
  }

  // optional .PFDESolver.TMatrix RealSolution = 3;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.realsolution_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TResults::GetClassData() const { return &_class_data_; }


void TResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TResults*>(&to_msg);
  auto& from = static_cast<const TResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PFDESolver.TResults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  if (from._internal_has_realsolutionname()) {
    _this->_internal_set_realsolutionname(from._internal_realsolutionname());
  }
  if (from._internal_has_task()) {
    _this->_internal_mutable_task()->::PFDESolver::TSolverConfig::MergeFrom(
        from._internal_task());
  }
  if (from._internal_has_realsolution()) {
    _this->_internal_mutable_realsolution()->::PFDESolver::TMatrix::MergeFrom(
        from._internal_realsolution());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TResults::CopyFrom(const TResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PFDESolver.TResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TResults::IsInitialized() const {
  return true;
}

void TResults::InternalSwap(TResults* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.realsolutionname_, lhs_arena,
      &other->_impl_.realsolutionname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TResults, _impl_.realsolution_)
      + sizeof(TResults::_impl_.realsolution_)
      - PROTOBUF_FIELD_OFFSET(TResults, _impl_.task_)>(
          reinterpret_cast<char*>(&_impl_.task_),
          reinterpret_cast<char*>(&other->_impl_.task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_result_2eproto_getter, &descriptor_table_result_2eproto_once,
      file_level_metadata_result_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PFDESolver
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PFDESolver::TResult*
Arena::CreateMaybeMessage< ::PFDESolver::TResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PFDESolver::TResult >(arena);
}
template<> PROTOBUF_NOINLINE ::PFDESolver::TResults*
Arena::CreateMaybeMessage< ::PFDESolver::TResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PFDESolver::TResults >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
