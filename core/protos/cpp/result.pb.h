// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: result.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_result_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_result_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "config.pb.h"
#include "matrix.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_result_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_result_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_result_2eproto;
namespace PFDESolver {
class TResult;
struct TResultDefaultTypeInternal;
extern TResultDefaultTypeInternal _TResult_default_instance_;
class TResults;
struct TResultsDefaultTypeInternal;
extern TResultsDefaultTypeInternal _TResults_default_instance_;
}  // namespace PFDESolver
PROTOBUF_NAMESPACE_OPEN
template<> ::PFDESolver::TResult* Arena::CreateMaybeMessage<::PFDESolver::TResult>(Arena*);
template<> ::PFDESolver::TResults* Arena::CreateMaybeMessage<::PFDESolver::TResults>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PFDESolver {

// ===================================================================

class TResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PFDESolver.TResult) */ {
 public:
  inline TResult() : TResult(nullptr) {}
  ~TResult() override;
  explicit PROTOBUF_CONSTEXPR TResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TResult(const TResult& from);
  TResult(TResult&& from) noexcept
    : TResult() {
    *this = ::std::move(from);
  }

  inline TResult& operator=(const TResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TResult& operator=(TResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const TResult* internal_default_instance() {
    return reinterpret_cast<const TResult*>(
               &_TResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TResult& a, TResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TResult& from) {
    TResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PFDESolver.TResult";
  }
  protected:
  explicit TResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodNameFieldNumber = 1,
    kFieldFieldNumber = 2,
    kSolveMatrixFieldNumber = 3,
  };
  // string MethodName = 1;
  void clear_methodname();
  const std::string& methodname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_methodname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_methodname();
  PROTOBUF_NODISCARD std::string* release_methodname();
  void set_allocated_methodname(std::string* methodname);
  private:
  const std::string& _internal_methodname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_methodname(const std::string& value);
  std::string* _internal_mutable_methodname();
  public:

  // .PFDESolver.TMatrix Field = 2;
  bool has_field() const;
  private:
  bool _internal_has_field() const;
  public:
  void clear_field();
  const ::PFDESolver::TMatrix& field() const;
  PROTOBUF_NODISCARD ::PFDESolver::TMatrix* release_field();
  ::PFDESolver::TMatrix* mutable_field();
  void set_allocated_field(::PFDESolver::TMatrix* field);
  private:
  const ::PFDESolver::TMatrix& _internal_field() const;
  ::PFDESolver::TMatrix* _internal_mutable_field();
  public:
  void unsafe_arena_set_allocated_field(
      ::PFDESolver::TMatrix* field);
  ::PFDESolver::TMatrix* unsafe_arena_release_field();

  // optional .PFDESolver.TMatrix SolveMatrix = 3;
  bool has_solvematrix() const;
  private:
  bool _internal_has_solvematrix() const;
  public:
  void clear_solvematrix();
  const ::PFDESolver::TMatrix& solvematrix() const;
  PROTOBUF_NODISCARD ::PFDESolver::TMatrix* release_solvematrix();
  ::PFDESolver::TMatrix* mutable_solvematrix();
  void set_allocated_solvematrix(::PFDESolver::TMatrix* solvematrix);
  private:
  const ::PFDESolver::TMatrix& _internal_solvematrix() const;
  ::PFDESolver::TMatrix* _internal_mutable_solvematrix();
  public:
  void unsafe_arena_set_allocated_solvematrix(
      ::PFDESolver::TMatrix* solvematrix);
  ::PFDESolver::TMatrix* unsafe_arena_release_solvematrix();

  // @@protoc_insertion_point(class_scope:PFDESolver.TResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr methodname_;
    ::PFDESolver::TMatrix* field_;
    ::PFDESolver::TMatrix* solvematrix_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_result_2eproto;
};
// -------------------------------------------------------------------

class TResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PFDESolver.TResults) */ {
 public:
  inline TResults() : TResults(nullptr) {}
  ~TResults() override;
  explicit PROTOBUF_CONSTEXPR TResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TResults(const TResults& from);
  TResults(TResults&& from) noexcept
    : TResults() {
    *this = ::std::move(from);
  }

  inline TResults& operator=(const TResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline TResults& operator=(TResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const TResults* internal_default_instance() {
    return reinterpret_cast<const TResults*>(
               &_TResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TResults& a, TResults& b) {
    a.Swap(&b);
  }
  inline void Swap(TResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TResults& from) {
    TResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PFDESolver.TResults";
  }
  protected:
  explicit TResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kRealSolutionNameFieldNumber = 4,
    kTaskFieldNumber = 1,
    kRealSolutionFieldNumber = 3,
  };
  // repeated .PFDESolver.TResult Results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::PFDESolver::TResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFDESolver::TResult >*
      mutable_results();
  private:
  const ::PFDESolver::TResult& _internal_results(int index) const;
  ::PFDESolver::TResult* _internal_add_results();
  public:
  const ::PFDESolver::TResult& results(int index) const;
  ::PFDESolver::TResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFDESolver::TResult >&
      results() const;

  // optional string RealSolutionName = 4;
  bool has_realsolutionname() const;
  private:
  bool _internal_has_realsolutionname() const;
  public:
  void clear_realsolutionname();
  const std::string& realsolutionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_realsolutionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_realsolutionname();
  PROTOBUF_NODISCARD std::string* release_realsolutionname();
  void set_allocated_realsolutionname(std::string* realsolutionname);
  private:
  const std::string& _internal_realsolutionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_realsolutionname(const std::string& value);
  std::string* _internal_mutable_realsolutionname();
  public:

  // .PFDESolver.TSolverConfig Task = 1;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const ::PFDESolver::TSolverConfig& task() const;
  PROTOBUF_NODISCARD ::PFDESolver::TSolverConfig* release_task();
  ::PFDESolver::TSolverConfig* mutable_task();
  void set_allocated_task(::PFDESolver::TSolverConfig* task);
  private:
  const ::PFDESolver::TSolverConfig& _internal_task() const;
  ::PFDESolver::TSolverConfig* _internal_mutable_task();
  public:
  void unsafe_arena_set_allocated_task(
      ::PFDESolver::TSolverConfig* task);
  ::PFDESolver::TSolverConfig* unsafe_arena_release_task();

  // optional .PFDESolver.TMatrix RealSolution = 3;
  bool has_realsolution() const;
  private:
  bool _internal_has_realsolution() const;
  public:
  void clear_realsolution();
  const ::PFDESolver::TMatrix& realsolution() const;
  PROTOBUF_NODISCARD ::PFDESolver::TMatrix* release_realsolution();
  ::PFDESolver::TMatrix* mutable_realsolution();
  void set_allocated_realsolution(::PFDESolver::TMatrix* realsolution);
  private:
  const ::PFDESolver::TMatrix& _internal_realsolution() const;
  ::PFDESolver::TMatrix* _internal_mutable_realsolution();
  public:
  void unsafe_arena_set_allocated_realsolution(
      ::PFDESolver::TMatrix* realsolution);
  ::PFDESolver::TMatrix* unsafe_arena_release_realsolution();

  // @@protoc_insertion_point(class_scope:PFDESolver.TResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFDESolver::TResult > results_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr realsolutionname_;
    ::PFDESolver::TSolverConfig* task_;
    ::PFDESolver::TMatrix* realsolution_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_result_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TResult

// string MethodName = 1;
inline void TResult::clear_methodname() {
  _impl_.methodname_.ClearToEmpty();
}
inline const std::string& TResult::methodname() const {
  // @@protoc_insertion_point(field_get:PFDESolver.TResult.MethodName)
  return _internal_methodname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TResult::set_methodname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.methodname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PFDESolver.TResult.MethodName)
}
inline std::string* TResult::mutable_methodname() {
  std::string* _s = _internal_mutable_methodname();
  // @@protoc_insertion_point(field_mutable:PFDESolver.TResult.MethodName)
  return _s;
}
inline const std::string& TResult::_internal_methodname() const {
  return _impl_.methodname_.Get();
}
inline void TResult::_internal_set_methodname(const std::string& value) {
  
  _impl_.methodname_.Set(value, GetArenaForAllocation());
}
inline std::string* TResult::_internal_mutable_methodname() {
  
  return _impl_.methodname_.Mutable(GetArenaForAllocation());
}
inline std::string* TResult::release_methodname() {
  // @@protoc_insertion_point(field_release:PFDESolver.TResult.MethodName)
  return _impl_.methodname_.Release();
}
inline void TResult::set_allocated_methodname(std::string* methodname) {
  if (methodname != nullptr) {
    
  } else {
    
  }
  _impl_.methodname_.SetAllocated(methodname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.methodname_.IsDefault()) {
    _impl_.methodname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PFDESolver.TResult.MethodName)
}

// .PFDESolver.TMatrix Field = 2;
inline bool TResult::_internal_has_field() const {
  return this != internal_default_instance() && _impl_.field_ != nullptr;
}
inline bool TResult::has_field() const {
  return _internal_has_field();
}
inline const ::PFDESolver::TMatrix& TResult::_internal_field() const {
  const ::PFDESolver::TMatrix* p = _impl_.field_;
  return p != nullptr ? *p : reinterpret_cast<const ::PFDESolver::TMatrix&>(
      ::PFDESolver::_TMatrix_default_instance_);
}
inline const ::PFDESolver::TMatrix& TResult::field() const {
  // @@protoc_insertion_point(field_get:PFDESolver.TResult.Field)
  return _internal_field();
}
inline void TResult::unsafe_arena_set_allocated_field(
    ::PFDESolver::TMatrix* field) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.field_);
  }
  _impl_.field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PFDESolver.TResult.Field)
}
inline ::PFDESolver::TMatrix* TResult::release_field() {
  
  ::PFDESolver::TMatrix* temp = _impl_.field_;
  _impl_.field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PFDESolver::TMatrix* TResult::unsafe_arena_release_field() {
  // @@protoc_insertion_point(field_release:PFDESolver.TResult.Field)
  
  ::PFDESolver::TMatrix* temp = _impl_.field_;
  _impl_.field_ = nullptr;
  return temp;
}
inline ::PFDESolver::TMatrix* TResult::_internal_mutable_field() {
  
  if (_impl_.field_ == nullptr) {
    auto* p = CreateMaybeMessage<::PFDESolver::TMatrix>(GetArenaForAllocation());
    _impl_.field_ = p;
  }
  return _impl_.field_;
}
inline ::PFDESolver::TMatrix* TResult::mutable_field() {
  ::PFDESolver::TMatrix* _msg = _internal_mutable_field();
  // @@protoc_insertion_point(field_mutable:PFDESolver.TResult.Field)
  return _msg;
}
inline void TResult::set_allocated_field(::PFDESolver::TMatrix* field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.field_);
  }
  if (field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field));
    if (message_arena != submessage_arena) {
      field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.field_ = field;
  // @@protoc_insertion_point(field_set_allocated:PFDESolver.TResult.Field)
}

// optional .PFDESolver.TMatrix SolveMatrix = 3;
inline bool TResult::_internal_has_solvematrix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solvematrix_ != nullptr);
  return value;
}
inline bool TResult::has_solvematrix() const {
  return _internal_has_solvematrix();
}
inline const ::PFDESolver::TMatrix& TResult::_internal_solvematrix() const {
  const ::PFDESolver::TMatrix* p = _impl_.solvematrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::PFDESolver::TMatrix&>(
      ::PFDESolver::_TMatrix_default_instance_);
}
inline const ::PFDESolver::TMatrix& TResult::solvematrix() const {
  // @@protoc_insertion_point(field_get:PFDESolver.TResult.SolveMatrix)
  return _internal_solvematrix();
}
inline void TResult::unsafe_arena_set_allocated_solvematrix(
    ::PFDESolver::TMatrix* solvematrix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.solvematrix_);
  }
  _impl_.solvematrix_ = solvematrix;
  if (solvematrix) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PFDESolver.TResult.SolveMatrix)
}
inline ::PFDESolver::TMatrix* TResult::release_solvematrix() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PFDESolver::TMatrix* temp = _impl_.solvematrix_;
  _impl_.solvematrix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PFDESolver::TMatrix* TResult::unsafe_arena_release_solvematrix() {
  // @@protoc_insertion_point(field_release:PFDESolver.TResult.SolveMatrix)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PFDESolver::TMatrix* temp = _impl_.solvematrix_;
  _impl_.solvematrix_ = nullptr;
  return temp;
}
inline ::PFDESolver::TMatrix* TResult::_internal_mutable_solvematrix() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.solvematrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::PFDESolver::TMatrix>(GetArenaForAllocation());
    _impl_.solvematrix_ = p;
  }
  return _impl_.solvematrix_;
}
inline ::PFDESolver::TMatrix* TResult::mutable_solvematrix() {
  ::PFDESolver::TMatrix* _msg = _internal_mutable_solvematrix();
  // @@protoc_insertion_point(field_mutable:PFDESolver.TResult.SolveMatrix)
  return _msg;
}
inline void TResult::set_allocated_solvematrix(::PFDESolver::TMatrix* solvematrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.solvematrix_);
  }
  if (solvematrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solvematrix));
    if (message_arena != submessage_arena) {
      solvematrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solvematrix, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.solvematrix_ = solvematrix;
  // @@protoc_insertion_point(field_set_allocated:PFDESolver.TResult.SolveMatrix)
}

// -------------------------------------------------------------------

// TResults

// .PFDESolver.TSolverConfig Task = 1;
inline bool TResults::_internal_has_task() const {
  return this != internal_default_instance() && _impl_.task_ != nullptr;
}
inline bool TResults::has_task() const {
  return _internal_has_task();
}
inline const ::PFDESolver::TSolverConfig& TResults::_internal_task() const {
  const ::PFDESolver::TSolverConfig* p = _impl_.task_;
  return p != nullptr ? *p : reinterpret_cast<const ::PFDESolver::TSolverConfig&>(
      ::PFDESolver::_TSolverConfig_default_instance_);
}
inline const ::PFDESolver::TSolverConfig& TResults::task() const {
  // @@protoc_insertion_point(field_get:PFDESolver.TResults.Task)
  return _internal_task();
}
inline void TResults::unsafe_arena_set_allocated_task(
    ::PFDESolver::TSolverConfig* task) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.task_);
  }
  _impl_.task_ = task;
  if (task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PFDESolver.TResults.Task)
}
inline ::PFDESolver::TSolverConfig* TResults::release_task() {
  
  ::PFDESolver::TSolverConfig* temp = _impl_.task_;
  _impl_.task_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PFDESolver::TSolverConfig* TResults::unsafe_arena_release_task() {
  // @@protoc_insertion_point(field_release:PFDESolver.TResults.Task)
  
  ::PFDESolver::TSolverConfig* temp = _impl_.task_;
  _impl_.task_ = nullptr;
  return temp;
}
inline ::PFDESolver::TSolverConfig* TResults::_internal_mutable_task() {
  
  if (_impl_.task_ == nullptr) {
    auto* p = CreateMaybeMessage<::PFDESolver::TSolverConfig>(GetArenaForAllocation());
    _impl_.task_ = p;
  }
  return _impl_.task_;
}
inline ::PFDESolver::TSolverConfig* TResults::mutable_task() {
  ::PFDESolver::TSolverConfig* _msg = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:PFDESolver.TResults.Task)
  return _msg;
}
inline void TResults::set_allocated_task(::PFDESolver::TSolverConfig* task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.task_);
  }
  if (task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task));
    if (message_arena != submessage_arena) {
      task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.task_ = task;
  // @@protoc_insertion_point(field_set_allocated:PFDESolver.TResults.Task)
}

// repeated .PFDESolver.TResult Results = 2;
inline int TResults::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int TResults::results_size() const {
  return _internal_results_size();
}
inline void TResults::clear_results() {
  _impl_.results_.Clear();
}
inline ::PFDESolver::TResult* TResults::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:PFDESolver.TResults.Results)
  return _impl_.results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFDESolver::TResult >*
TResults::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:PFDESolver.TResults.Results)
  return &_impl_.results_;
}
inline const ::PFDESolver::TResult& TResults::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const ::PFDESolver::TResult& TResults::results(int index) const {
  // @@protoc_insertion_point(field_get:PFDESolver.TResults.Results)
  return _internal_results(index);
}
inline ::PFDESolver::TResult* TResults::_internal_add_results() {
  return _impl_.results_.Add();
}
inline ::PFDESolver::TResult* TResults::add_results() {
  ::PFDESolver::TResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:PFDESolver.TResults.Results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFDESolver::TResult >&
TResults::results() const {
  // @@protoc_insertion_point(field_list:PFDESolver.TResults.Results)
  return _impl_.results_;
}

// optional .PFDESolver.TMatrix RealSolution = 3;
inline bool TResults::_internal_has_realsolution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.realsolution_ != nullptr);
  return value;
}
inline bool TResults::has_realsolution() const {
  return _internal_has_realsolution();
}
inline const ::PFDESolver::TMatrix& TResults::_internal_realsolution() const {
  const ::PFDESolver::TMatrix* p = _impl_.realsolution_;
  return p != nullptr ? *p : reinterpret_cast<const ::PFDESolver::TMatrix&>(
      ::PFDESolver::_TMatrix_default_instance_);
}
inline const ::PFDESolver::TMatrix& TResults::realsolution() const {
  // @@protoc_insertion_point(field_get:PFDESolver.TResults.RealSolution)
  return _internal_realsolution();
}
inline void TResults::unsafe_arena_set_allocated_realsolution(
    ::PFDESolver::TMatrix* realsolution) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.realsolution_);
  }
  _impl_.realsolution_ = realsolution;
  if (realsolution) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PFDESolver.TResults.RealSolution)
}
inline ::PFDESolver::TMatrix* TResults::release_realsolution() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PFDESolver::TMatrix* temp = _impl_.realsolution_;
  _impl_.realsolution_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PFDESolver::TMatrix* TResults::unsafe_arena_release_realsolution() {
  // @@protoc_insertion_point(field_release:PFDESolver.TResults.RealSolution)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PFDESolver::TMatrix* temp = _impl_.realsolution_;
  _impl_.realsolution_ = nullptr;
  return temp;
}
inline ::PFDESolver::TMatrix* TResults::_internal_mutable_realsolution() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.realsolution_ == nullptr) {
    auto* p = CreateMaybeMessage<::PFDESolver::TMatrix>(GetArenaForAllocation());
    _impl_.realsolution_ = p;
  }
  return _impl_.realsolution_;
}
inline ::PFDESolver::TMatrix* TResults::mutable_realsolution() {
  ::PFDESolver::TMatrix* _msg = _internal_mutable_realsolution();
  // @@protoc_insertion_point(field_mutable:PFDESolver.TResults.RealSolution)
  return _msg;
}
inline void TResults::set_allocated_realsolution(::PFDESolver::TMatrix* realsolution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.realsolution_);
  }
  if (realsolution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(realsolution));
    if (message_arena != submessage_arena) {
      realsolution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, realsolution, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.realsolution_ = realsolution;
  // @@protoc_insertion_point(field_set_allocated:PFDESolver.TResults.RealSolution)
}

// optional string RealSolutionName = 4;
inline bool TResults::_internal_has_realsolutionname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TResults::has_realsolutionname() const {
  return _internal_has_realsolutionname();
}
inline void TResults::clear_realsolutionname() {
  _impl_.realsolutionname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TResults::realsolutionname() const {
  // @@protoc_insertion_point(field_get:PFDESolver.TResults.RealSolutionName)
  return _internal_realsolutionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TResults::set_realsolutionname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.realsolutionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PFDESolver.TResults.RealSolutionName)
}
inline std::string* TResults::mutable_realsolutionname() {
  std::string* _s = _internal_mutable_realsolutionname();
  // @@protoc_insertion_point(field_mutable:PFDESolver.TResults.RealSolutionName)
  return _s;
}
inline const std::string& TResults::_internal_realsolutionname() const {
  return _impl_.realsolutionname_.Get();
}
inline void TResults::_internal_set_realsolutionname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.realsolutionname_.Set(value, GetArenaForAllocation());
}
inline std::string* TResults::_internal_mutable_realsolutionname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.realsolutionname_.Mutable(GetArenaForAllocation());
}
inline std::string* TResults::release_realsolutionname() {
  // @@protoc_insertion_point(field_release:PFDESolver.TResults.RealSolutionName)
  if (!_internal_has_realsolutionname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.realsolutionname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.realsolutionname_.IsDefault()) {
    _impl_.realsolutionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TResults::set_allocated_realsolutionname(std::string* realsolutionname) {
  if (realsolutionname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.realsolutionname_.SetAllocated(realsolutionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.realsolutionname_.IsDefault()) {
    _impl_.realsolutionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PFDESolver.TResults.RealSolutionName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PFDESolver

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_result_2eproto
