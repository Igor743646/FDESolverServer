// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: config.proto

package pfdesolver_protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceCount               *uint64 `protobuf:"varint,1,opt,name=SpaceCount,proto3,oneof" json:"SpaceCount,omitempty"`                              // количество ячеек по x
	TimeCount                *uint64 `protobuf:"varint,2,opt,name=TimeCount,proto3,oneof" json:"TimeCount,omitempty"`                                // количество ячеек по t
	LeftBound                float64 `protobuf:"fixed64,3,opt,name=LeftBound,proto3" json:"LeftBound,omitempty"`                                     // левая граница отрезка сетки по x координате
	RightBound               float64 `protobuf:"fixed64,4,opt,name=RightBound,proto3" json:"RightBound,omitempty"`                                   // правая граница сетки по x координате
	MaxTime                  float64 `protobuf:"fixed64,5,opt,name=MaxTime,proto3" json:"MaxTime,omitempty"`                                         // граница отрезка времени по t координате
	Alpha                    float64 `protobuf:"fixed64,6,opt,name=Alpha,proto3" json:"Alpha,omitempty"`                                             // степень производой по x
	Gamma                    float64 `protobuf:"fixed64,7,opt,name=Gamma,proto3" json:"Gamma,omitempty"`                                             // степень производной по t
	SpaceStep                float64 `protobuf:"fixed64,8,opt,name=SpaceStep,proto3" json:"SpaceStep,omitempty"`                                     // шаг x по сетке
	TimeStep                 float64 `protobuf:"fixed64,9,opt,name=TimeStep,proto3" json:"TimeStep,omitempty"`                                       // шаг t по сетке
	Beta                     float64 `protobuf:"fixed64,10,opt,name=Beta,proto3" json:"Beta,omitempty"`                                              // коэффициент доли лево/правосторонней производных [-1;+1]
	AlphaLeft                float64 `protobuf:"fixed64,11,opt,name=AlphaLeft,proto3" json:"AlphaLeft,omitempty"`                                    // коэффициент граничных условий третьего рода для x == L
	BetaLeft                 float64 `protobuf:"fixed64,12,opt,name=BetaLeft,proto3" json:"BetaLeft,omitempty"`                                      // коэффициент граничных условий третьего рода для x == L
	AlphaRight               float64 `protobuf:"fixed64,13,opt,name=AlphaRight,proto3" json:"AlphaRight,omitempty"`                                  // коэффициент граничных условий третьего рода для x == R
	BetaRight                float64 `protobuf:"fixed64,14,opt,name=BetaRight,proto3" json:"BetaRight,omitempty"`                                    // коэффициент граничных условий третьего рода для x == R
	DiffusionCoefficient     string  `protobuf:"bytes,15,opt,name=DiffusionCoefficient,proto3" json:"DiffusionCoefficient,omitempty"`                // коэффициент диффузии
	DemolitionCoefficient    string  `protobuf:"bytes,16,opt,name=DemolitionCoefficient,proto3" json:"DemolitionCoefficient,omitempty"`              // коэффициент линейного сноса
	ZeroTimeState            string  `protobuf:"bytes,17,opt,name=ZeroTimeState,proto3" json:"ZeroTimeState,omitempty"`                              // функция u(x, 0)
	SourceFunction           string  `protobuf:"bytes,18,opt,name=SourceFunction,proto3" json:"SourceFunction,omitempty"`                            // функция f(x, t)
	LeftBoundState           string  `protobuf:"bytes,19,opt,name=LeftBoundState,proto3" json:"LeftBoundState,omitempty"`                            // функция u(L, t)
	RightBoundState          string  `protobuf:"bytes,20,opt,name=RightBoundState,proto3" json:"RightBoundState,omitempty"`                          // функция u(R, t)
	BordersAvailable         bool    `protobuf:"varint,21,opt,name=BordersAvailable,proto3" json:"BordersAvailable,omitempty"`                       // стоит ли учитывать граничные условия
	StochasticIterationCount *uint64 `protobuf:"varint,22,opt,name=StochasticIterationCount,proto3,oneof" json:"StochasticIterationCount,omitempty"` // количество иттераций для стохастического метода
	RealSolutionName         *string `protobuf:"bytes,23,opt,name=RealSolutionName,proto3,oneof" json:"RealSolutionName,omitempty"`                  // названия истиного решения
	RealSolution             *string `protobuf:"bytes,24,opt,name=RealSolution,proto3,oneof" json:"RealSolution,omitempty"`                          // функция u(x, t);
	SolveMethods             *string `protobuf:"bytes,25,opt,name=SolveMethods,proto3,oneof" json:"SolveMethods,omitempty"`                          // методы для решения
}

func (x *TClientConfig) Reset() {
	*x = TClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TClientConfig) ProtoMessage() {}

func (x *TClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TClientConfig.ProtoReflect.Descriptor instead.
func (*TClientConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

func (x *TClientConfig) GetSpaceCount() uint64 {
	if x != nil && x.SpaceCount != nil {
		return *x.SpaceCount
	}
	return 0
}

func (x *TClientConfig) GetTimeCount() uint64 {
	if x != nil && x.TimeCount != nil {
		return *x.TimeCount
	}
	return 0
}

func (x *TClientConfig) GetLeftBound() float64 {
	if x != nil {
		return x.LeftBound
	}
	return 0
}

func (x *TClientConfig) GetRightBound() float64 {
	if x != nil {
		return x.RightBound
	}
	return 0
}

func (x *TClientConfig) GetMaxTime() float64 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

func (x *TClientConfig) GetAlpha() float64 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *TClientConfig) GetGamma() float64 {
	if x != nil {
		return x.Gamma
	}
	return 0
}

func (x *TClientConfig) GetSpaceStep() float64 {
	if x != nil {
		return x.SpaceStep
	}
	return 0
}

func (x *TClientConfig) GetTimeStep() float64 {
	if x != nil {
		return x.TimeStep
	}
	return 0
}

func (x *TClientConfig) GetBeta() float64 {
	if x != nil {
		return x.Beta
	}
	return 0
}

func (x *TClientConfig) GetAlphaLeft() float64 {
	if x != nil {
		return x.AlphaLeft
	}
	return 0
}

func (x *TClientConfig) GetBetaLeft() float64 {
	if x != nil {
		return x.BetaLeft
	}
	return 0
}

func (x *TClientConfig) GetAlphaRight() float64 {
	if x != nil {
		return x.AlphaRight
	}
	return 0
}

func (x *TClientConfig) GetBetaRight() float64 {
	if x != nil {
		return x.BetaRight
	}
	return 0
}

func (x *TClientConfig) GetDiffusionCoefficient() string {
	if x != nil {
		return x.DiffusionCoefficient
	}
	return ""
}

func (x *TClientConfig) GetDemolitionCoefficient() string {
	if x != nil {
		return x.DemolitionCoefficient
	}
	return ""
}

func (x *TClientConfig) GetZeroTimeState() string {
	if x != nil {
		return x.ZeroTimeState
	}
	return ""
}

func (x *TClientConfig) GetSourceFunction() string {
	if x != nil {
		return x.SourceFunction
	}
	return ""
}

func (x *TClientConfig) GetLeftBoundState() string {
	if x != nil {
		return x.LeftBoundState
	}
	return ""
}

func (x *TClientConfig) GetRightBoundState() string {
	if x != nil {
		return x.RightBoundState
	}
	return ""
}

func (x *TClientConfig) GetBordersAvailable() bool {
	if x != nil {
		return x.BordersAvailable
	}
	return false
}

func (x *TClientConfig) GetStochasticIterationCount() uint64 {
	if x != nil && x.StochasticIterationCount != nil {
		return *x.StochasticIterationCount
	}
	return 0
}

func (x *TClientConfig) GetRealSolutionName() string {
	if x != nil && x.RealSolutionName != nil {
		return *x.RealSolutionName
	}
	return ""
}

func (x *TClientConfig) GetRealSolution() string {
	if x != nil && x.RealSolution != nil {
		return *x.RealSolution
	}
	return ""
}

func (x *TClientConfig) GetSolveMethods() string {
	if x != nil && x.SolveMethods != nil {
		return *x.SolveMethods
	}
	return ""
}

type TSolverConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceCount       uint64  `protobuf:"varint,1,opt,name=SpaceCount,proto3" json:"SpaceCount,omitempty"`              // количество ячеек по x
	TimeCount        uint64  `protobuf:"varint,2,opt,name=TimeCount,proto3" json:"TimeCount,omitempty"`                // количество ячеек по t
	LeftBound        float64 `protobuf:"fixed64,3,opt,name=LeftBound,proto3" json:"LeftBound,omitempty"`               // левая граница отрезка сетки по x координате
	RightBound       float64 `protobuf:"fixed64,4,opt,name=RightBound,proto3" json:"RightBound,omitempty"`             // правая граница сетки по x координате
	MaxTime          float64 `protobuf:"fixed64,5,opt,name=MaxTime,proto3" json:"MaxTime,omitempty"`                   // граница отрезка времени по t координате
	Alpha            float64 `protobuf:"fixed64,6,opt,name=Alpha,proto3" json:"Alpha,omitempty"`                       // степень производой по x
	Gamma            float64 `protobuf:"fixed64,7,opt,name=Gamma,proto3" json:"Gamma,omitempty"`                       // степень производной по t
	SpaceStep        float64 `protobuf:"fixed64,8,opt,name=SpaceStep,proto3" json:"SpaceStep,omitempty"`               // шаг x по сетке
	TimeStep         float64 `protobuf:"fixed64,9,opt,name=TimeStep,proto3" json:"TimeStep,omitempty"`                 // шаг t по сетке
	Beta             float64 `protobuf:"fixed64,10,opt,name=Beta,proto3" json:"Beta,omitempty"`                        // коэффициент доли лево/правосторонней производных [-1;+1]
	AlphaLeft        float64 `protobuf:"fixed64,11,opt,name=AlphaLeft,proto3" json:"AlphaLeft,omitempty"`              // коэффициент граничных условий третьего рода для x == L
	BetaLeft         float64 `protobuf:"fixed64,12,opt,name=BetaLeft,proto3" json:"BetaLeft,omitempty"`                // коэффициент граничных условий третьего рода для x == L
	AlphaRight       float64 `protobuf:"fixed64,13,opt,name=AlphaRight,proto3" json:"AlphaRight,omitempty"`            // коэффициент граничных условий третьего рода для x == R
	BetaRight        float64 `protobuf:"fixed64,14,opt,name=BetaRight,proto3" json:"BetaRight,omitempty"`              // коэффициент граничных условий третьего рода для x == R
	BordersAvailable bool    `protobuf:"varint,15,opt,name=BordersAvailable,proto3" json:"BordersAvailable,omitempty"` // стоит ли учитывать граничные условия
}

func (x *TSolverConfig) Reset() {
	*x = TSolverConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSolverConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSolverConfig) ProtoMessage() {}

func (x *TSolverConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSolverConfig.ProtoReflect.Descriptor instead.
func (*TSolverConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

func (x *TSolverConfig) GetSpaceCount() uint64 {
	if x != nil {
		return x.SpaceCount
	}
	return 0
}

func (x *TSolverConfig) GetTimeCount() uint64 {
	if x != nil {
		return x.TimeCount
	}
	return 0
}

func (x *TSolverConfig) GetLeftBound() float64 {
	if x != nil {
		return x.LeftBound
	}
	return 0
}

func (x *TSolverConfig) GetRightBound() float64 {
	if x != nil {
		return x.RightBound
	}
	return 0
}

func (x *TSolverConfig) GetMaxTime() float64 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

func (x *TSolverConfig) GetAlpha() float64 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *TSolverConfig) GetGamma() float64 {
	if x != nil {
		return x.Gamma
	}
	return 0
}

func (x *TSolverConfig) GetSpaceStep() float64 {
	if x != nil {
		return x.SpaceStep
	}
	return 0
}

func (x *TSolverConfig) GetTimeStep() float64 {
	if x != nil {
		return x.TimeStep
	}
	return 0
}

func (x *TSolverConfig) GetBeta() float64 {
	if x != nil {
		return x.Beta
	}
	return 0
}

func (x *TSolverConfig) GetAlphaLeft() float64 {
	if x != nil {
		return x.AlphaLeft
	}
	return 0
}

func (x *TSolverConfig) GetBetaLeft() float64 {
	if x != nil {
		return x.BetaLeft
	}
	return 0
}

func (x *TSolverConfig) GetAlphaRight() float64 {
	if x != nil {
		return x.AlphaRight
	}
	return 0
}

func (x *TSolverConfig) GetBetaRight() float64 {
	if x != nil {
		return x.BetaRight
	}
	return 0
}

func (x *TSolverConfig) GetBordersAvailable() bool {
	if x != nil {
		return x.BordersAvailable
	}
	return false
}

var File_config_proto protoreflect.FileDescriptor

var file_config_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x50, 0x46, 0x44, 0x45, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x22, 0x8c, 0x08, 0x0a, 0x0d, 0x54,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0a,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x0a, 0x53, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x65, 0x66, 0x74, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4c, 0x65, 0x66, 0x74, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x65, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x42, 0x65, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x4c,
	0x65, 0x66, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x4c, 0x65, 0x66, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x61, 0x4c, 0x65, 0x66, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x42, 0x65, 0x74, 0x61, 0x4c, 0x65, 0x66, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x74, 0x61, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x65, 0x74, 0x61, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x32,
	0x0a, 0x14, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x44, 0x69,
	0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x65, 0x6d, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x44, 0x65, 0x6d, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x65,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x5a, 0x65, 0x72, 0x6f,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x5a, 0x65, 0x72, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x65, 0x66, 0x74, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x4c, 0x65, 0x66, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x63, 0x68, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x18, 0x53, 0x74, 0x6f, 0x63, 0x68, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x10, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c,
	0x52, 0x65, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x54, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x68, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x52, 0x65, 0x61, 0x6c,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x53, 0x6f, 0x6c,
	0x76, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0xc3, 0x03, 0x0a, 0x0d, 0x54, 0x53,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x53, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x65, 0x66,
	0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4c, 0x65,
	0x66, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x61, 0x6d, 0x6d, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x65, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x42, 0x65, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74,
	0x61, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x42, 0x65, 0x74,
	0x61, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x74, 0x61, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x65, 0x74, 0x61, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x42,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x14, 0x5a, 0x12, 0x2f, 0x70, 0x66, 0x64, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData = file_config_proto_rawDesc
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_proto_rawDescData)
	})
	return file_config_proto_rawDescData
}

var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_config_proto_goTypes = []any{
	(*TClientConfig)(nil), // 0: PFDESolver.TClientConfig
	(*TSolverConfig)(nil), // 1: PFDESolver.TSolverConfig
}
var file_config_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TSolverConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_config_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		MessageInfos:      file_config_proto_msgTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_rawDesc = nil
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
